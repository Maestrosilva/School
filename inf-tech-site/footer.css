footer {
    background: black;
    margin-top: 100px;
    display: flex;
    justify-content: center;
    align-content: center;
    height: 50px;
  }
  
  footer span {
    color: wheat;
    padding-top: 20px;
  }
  @media all and (max-device-width: 730px) {
    footer {
        font-size: 13px;
    }
  }
#include <iostream>



int main() {

//ex1
	//int a;
	//std::cin >> a;
	//if (a < 1) {
	//	std::cout << "incorrect value";
	//}
	//bool isPrime = true;
	//if (a == 1) {
	//	std::cout << 0;
	//	return 0;
	//}
	//if (a == 2) {
	//	std::cout << 1;
	//	return 0;
	//}
	//for (int i = 3; i * i < a; i += 2) {
	//	if (a % i == 0) {
	//		isPrime = false;
	//	}
	//}
	//std::cout << isPrime;

	//ex2
	//unsigned int n, digit, counter = 0;
	//std::cin >> n >> digit;
	//while (n) {
	//	if (n % 10 == digit) {
	//		counter++;
	//	}
	//	n /= 10;
	//}
	//std::cout << counter;

	//ex3
	//int originalNumber, number;
	//std::cin >> originalNumber;
	//
	//for (int i = 1; i <= 9; i++) {
	//	number = originalNumber;
	//	while (number) {
	//		if (i == number % 10) {
	//			std::cout << i;
	//		}
	//		number /= 10;
	//	}
	//}

	//ex4
	//int number;
	//std::cin >> number;
	//if (number % 10 == 0) {
	//	number /= 10;
	//}
	//while (number) {
	//	int digit = number % 10;
	//	number /= 10;
	//	std::cout << digit;
	//}

	//ex5
	//int k, m, n;
	//std::cin >> k >> m >> n;
	//for (int i = m; i <= n; i++) {
	//	bool isSpecial = true;
	//	int num = i;
	//	while (num) {
	//		int digit = num % 10;
	//		num /= 10;
	//		if (digit == 0) {
	//			isSpecial = false;
	//			break;
	//		}
	//		if (k % digit != 0) {
	//			isSpecial = false;
	//			break;
	//		}
	//	}
	//	if (isSpecial) {
	//		std::cout << i << " ";
	//	}
	//}

	//ex6
	int n, sameN;
	std::cin >> n;
	sameN = n;
	int digitCount = 0;
	while (n) {
		digitCount++;
		n /= 10;
	}
	n = sameN;
	int newNum = 0;
	int power = digitCount;
	if (digitCount % 2 == 0) {
		digitCount -= 2;
		for (int i = 1; i <= digitCount; i++) {
			if (i == digitCount / 2 || i == digitCount / 2 + 1) {
				n /= 10;
				break;
			}
			power++;
			int digit = n % 10;
			int toAdd = digit;
			n /= 10;
			for (int j = 0; j <= power; j++)
				toAdd *= 10;
			newNum += toAdd;
		}
	}
	else {
		for (int i = 1; i <= digitCount; i++) {
			if (i == digitCount / 2 + 1) {
				n /= 10;
				continue;
			}
			power--;
			int digit = n % 10;
			int toAdd = digit;
			n /= 10;
			for (int j = 1; j <= power; j++)
				toAdd *= 10;
			newNum += toAdd;
		}
	}
	std::cout << newNum << " " << newNum + 1;
}
