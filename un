#include <iostream>
const size_t MAX_SIZE = 32;
void swap(int& a, int& b) {
	int diff = a ^ b;
	a ^= diff;
	b ^= diff;
}
int max(int a, int b) {
	return a > b ? a : b;
}
int min(int a, int b) {
	return a < b ? a : b;
}
void changeBit(size_t& n, size_t p, bool b) {
	//100010, 1, 0
	//111101
	if ((n >> p) & 1 && !b) {
		n &= ~(1 << p);
	}
	else if(!(n >> p) && (1 && b)) {
		n |= (1 << p);
	}
	//10001010, 0, 1
	//00000001

}
void ex1() {
	size_t x, m, n;
	std::cin >> x >> n >> m;
	//10000

}

void ex2() {
	size_t n, result = 0;
	std::cin >> n;
	while (n) {
		result += n&1;
		n >>= 1;
	}
	std::cout << result;
}

void ex3() {
	size_t n, k;
	std::cin >> n >> k;
	std::cout << n - ((n >> k) << k);
}

void ex4() {
	int a, b;
	std::cin >> a >> b;
	swap(a, b);
	std::cout << a << " " << b;
	
}

void ex5() {
	size_t n, p, b;
	std::cin >> n >> p >> b;
	changeBit(n, p, b);
	std::cout << n;
}

void ex6() {
	int a, b;
	std::cin >> a >> b;
	//std::cout << max(a, b) / min(a, b);
	if (max(a, b)/min(a, b) >= 2) {
		std::cout << 0;
		return;
	}
	int aOnes = 0, bOnes = 0;
	while (a) {
		aOnes += a & 1;
		a >>= 1;
	}
	while (b) {
		bOnes += b & 1;
		b >>= 1;
	}
	std::cout << (aOnes == bOnes);
}

void bonus2() {
	const char a[] = "1234";
	for (size_t i = 1; i < 4; i++) {
		combs(a, i, 0);
	}
}
int main()
{
	//ex1();
	//ex2();
	//ex3();
	//ex4();
	//ex5();
	//ex6();
	bonus2();
}
